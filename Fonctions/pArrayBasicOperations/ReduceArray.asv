function [Aphr,ref,htrunc] = ReduceArray(Aph,htrunc,varg)
%ReduceArray Summary
%   ReduceArray(Aph) with Aph a 3D array of phasors of A(t) of size m x n x
%   (2nhA +1), delete excessive phasor in Aph :
%   default : all last 0 phasor in  both dimension
%   specify treshold with name value parameter "threshold" to switch to "delete all
%   last phasor less of equal than threshlod"
%   specify method with name value "method" : 'relative' or 'absolute'.
%   'relative' only delete harmonics is their relative value to the maximal
%   harmonic is less than the treshold.
%   ReduceArray(Aph,5) truncate Aph to the 5 hmq.
%
arguments
    Aph
    htrunc=[]
    varg.method char {mustBeMember(varg.method,{'absolute','relative'})} = 'absolute'
    varg.threshold {mustBeNumeric,mustBeReal} = 0
    varg.exclude0Phasor (1,1) logical = true
end


if isa(Aph,'PhasorArray')
    Aph=Aph.Value;
end

nhA=(size(Aph,3)-1)/2;

%maximal ref phasor for each coordinate
if varg.exclude0Phasor
    ref=max(abs(Aph(:,:,[1:nhA , (nhA+2):(2*nhA+1)])),[],3); %maximum harmonic on each coeef, excepting the phasor 0.
else
    ref=max(abs(Aph),[],3); %maximum harmonic on each coeef, excepting the phasor 0.
end

switch varg.method
    case 'absolute'
        if isempty(htrunc)
            kk=nhA;
            toto = abs(Aph(:,:,nhA+1-kk)) + abs(Aph(:,:,nhA+1+kk));
            while isempty(find(toto>varg.threshold,1)) && kk>0
                kk=kk-1;
                toto = abs(Aph(:,:,nhA+1-kk)) + abs(Aph(:,:,nhA+1+kk));
            end
            Aphr=Aph(:,:,nhA+1+(-kk:kk));
            htrunc=kk;
        else
            htrunc=min(htrunc,nhA);
            Aphr=Aph(:,:,(nhA+1)+(-htrunc:htrunc));
        end


    case 'relative'
        if isempty(htrunc)
            kk=nhA;
            toto = abs(Aph(:,:,nhA+1-kk)) + abs(Aph(:,:,nhA+1+kk));
            toto = toto./2./ref;
            while isempty(find(toto>varg.threshold,1)) && kk>(-nhA)
                kk=kk-1;
                toto = abs(Aph(:,:,nhA+1-kk)) + abs(Aph(:,:,nhA+1+kk));
                toto = toto./2./ref;
            end
            Aphr=Aph(:,:,nhA+1+(-kk:kk));
            htrunc=kk;
        else
            htrunc=min(htrunc,nhA);
            Aphr=Aph(:,:,(nhA+1)+(-htrunc:htrunc));
        end
end

end